Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     tipo -> ENTERO
Rule 2     tipo -> FLOTANTE
Rule 3     cte -> CTE_ENT
Rule 4     cte -> CTE_FLOT
Rule 5     asigna -> ID OP_ASIG expresion PUNTO_Y_COMA
Rule 6     estatuto -> asigna
Rule 7     estatuto -> condicion
Rule 8     estatuto -> ciclo
Rule 9     estatuto -> llamada PUNTO_Y_COMA
Rule 10    estatuto -> imprime
Rule 11    estatuto -> CORA_ABRE list_estatuto CORA_CIERRA
Rule 12    list_estatuto -> empty
Rule 13    list_estatuto -> estatuto list_estatuto
Rule 14    cuerpo -> LLAVE_ABRE cuerpo_estat LLAVE_CIERRA
Rule 15    cuerpo_estat -> empty
Rule 16    cuerpo_estat -> estatuto cuerpo_estat
Rule 17    expresion -> exp expresion_exp
Rule 18    expresion_exp -> empty
Rule 19    expresion_exp -> OP_MAYOR exp
Rule 20    expresion_exp -> OP_MENOR exp
Rule 21    expresion_exp -> OP_DIF exp
Rule 22    expresion_exp -> OP_IGUAL exp
Rule 23    ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA
Rule 24    condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA
Rule 25    condicion_cuerpo -> empty
Rule 26    condicion_cuerpo -> SINO cuerpo
Rule 27    imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA
Rule 28    imprime_exp -> expresion imprime_exp_p
Rule 29    imprime_exp -> LETRERO imprime_exp_p
Rule 30    imprime_exp_p -> empty
Rule 31    imprime_exp_p -> COMA imprime_exp
Rule 32    llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA
Rule 33    llamada_expresion -> empty
Rule 34    llamada_expresion -> expresion llamada_ex
Rule 35    llamada_ex -> empty
Rule 36    llamada_ex -> COMA expresion llamada_ex
Rule 37    factor -> PAR_ABRE expresion PAR_CIERRA
Rule 38    factor -> factor_sr factor_cte
Rule 39    factor_sr -> empty
Rule 40    factor_sr -> factor_rs
Rule 41    factor_rs -> OP_SUMA
Rule 42    factor_rs -> OP_RESTA
Rule 43    factor_cte -> ID
Rule 44    factor_cte -> cte
Rule 45    factor_cte -> llamada
Rule 46    vars -> VARS ID vars_todo
Rule 47    vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final
Rule 48    vars_coma -> empty
Rule 49    vars_coma -> COMA ID vars_coma
Rule 50    vars_final -> empty
Rule 51    vars_final -> vars_todo
Rule 52    funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA
Rule 53    funcs_nt -> NULA
Rule 54    funcs_nt -> tipo
Rule 55    func_tipo -> empty
Rule 56    func_tipo -> ID DOS_PUNTOS tipo funcs_coma
Rule 57    funcs_coma -> empty
Rule 58    funcs_coma -> COMA ID DOS_PUNTOS tipo funcs_coma
Rule 59    func_vars -> empty
Rule 60    func_vars -> vars
Rule 61    exp -> termino exp_termino
Rule 62    exp_termino -> empty
Rule 63    exp_termino -> OP_SUMA exp
Rule 64    exp_termino -> OP_RESTA exp
Rule 65    termino -> factor termino_factor
Rule 66    termino_factor -> empty
Rule 67    termino_factor -> OP_MULT termino
Rule 68    termino_factor -> OP_DIV termino
Rule 69    programa -> PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo FIN
Rule 70    pro_vars -> empty
Rule 71    pro_vars -> vars
Rule 72    pro_funcs -> empty
Rule 73    pro_funcs -> pro_funcs_list
Rule 74    pro_funcs_list -> funcs
Rule 75    pro_funcs_list -> pro_funcs_list funcs
Rule 76    empty -> <empty>

Terminals, with rules where they appear

COMA                 : 31 36 49 58
CORA_ABRE            : 11
CORA_CIERRA          : 11
CTE_ENT              : 3
CTE_FLOT             : 4
DOS_PUNTOS           : 47 56 58
ENTERO               : 1
ESCRIBE              : 27
FIN                  : 69
FLOTANTE             : 2
HAZ                  : 23
ID                   : 5 32 43 46 49 52 56 58 69
INICIO               : 69
LETRERO              : 29
LLAVE_ABRE           : 14 52
LLAVE_CIERRA         : 14 52
MIENTRAS             : 23
NULA                 : 53
OP_ASIG              : 5
OP_DIF               : 21
OP_DIV               : 68
OP_IGUAL             : 22
OP_MAYOR             : 19
OP_MENOR             : 20
OP_MULT              : 67
OP_RESTA             : 42 64
OP_SUMA              : 41 63
PAR_ABRE             : 23 24 27 32 37 52
PAR_CIERRA           : 23 24 27 32 37 52
PROGRAMA             : 69
PUNTO_Y_COMA         : 5 9 23 24 27 47 52 69
SI                   : 24
SINO                 : 26
VARS                 : 46
error                : 

Nonterminals, with rules where they appear

asigna               : 6
ciclo                : 8
condicion            : 7
condicion_cuerpo     : 24
cte                  : 44
cuerpo               : 23 24 26 52 69
cuerpo_estat         : 14 16
empty                : 12 15 18 25 30 33 35 39 48 50 55 57 59 62 66 70 72
estatuto             : 13 16
exp                  : 17 19 20 21 22 63 64
exp_termino          : 61
expresion            : 5 23 24 28 34 36 37
expresion_exp        : 17
factor               : 65
factor_cte           : 38
factor_rs            : 40
factor_sr            : 38
func_tipo            : 52
func_vars            : 52
funcs                : 74 75
funcs_coma           : 56 58
funcs_nt             : 52
imprime              : 10
imprime_exp          : 27 31
imprime_exp_p        : 28 29
list_estatuto        : 11 13
llamada              : 9 45
llamada_ex           : 34 36
llamada_expresion    : 32
pro_funcs            : 69
pro_funcs_list       : 73 75
pro_vars             : 69
programa             : 0
termino              : 61 67 68
termino_factor       : 65
tipo                 : 47 54 56 58
vars                 : 60 71
vars_coma            : 47 49
vars_final           : 47
vars_todo            : 46 51

Parsing method: LALR

state 0

    (0) S' -> . programa
    (69) programa -> . PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo FIN

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (69) programa -> PROGRAMA . ID PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo FIN

    ID              shift and go to state 3


state 3

    (69) programa -> PROGRAMA ID . PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo FIN

    PUNTO_Y_COMA    shift and go to state 4


state 4

    (69) programa -> PROGRAMA ID PUNTO_Y_COMA . pro_vars pro_funcs INICIO cuerpo FIN
    (70) pro_vars -> . empty
    (71) pro_vars -> . vars
    (76) empty -> .
    (46) vars -> . VARS ID vars_todo

    NULA            reduce using rule 76 (empty -> .)
    ENTERO          reduce using rule 76 (empty -> .)
    FLOTANTE        reduce using rule 76 (empty -> .)
    INICIO          reduce using rule 76 (empty -> .)
    VARS            shift and go to state 8

    pro_vars                       shift and go to state 5
    empty                          shift and go to state 6
    vars                           shift and go to state 7

state 5

    (69) programa -> PROGRAMA ID PUNTO_Y_COMA pro_vars . pro_funcs INICIO cuerpo FIN
    (72) pro_funcs -> . empty
    (73) pro_funcs -> . pro_funcs_list
    (76) empty -> .
    (74) pro_funcs_list -> . funcs
    (75) pro_funcs_list -> . pro_funcs_list funcs
    (52) funcs -> . funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA
    (53) funcs_nt -> . NULA
    (54) funcs_nt -> . tipo
    (1) tipo -> . ENTERO
    (2) tipo -> . FLOTANTE

    INICIO          reduce using rule 76 (empty -> .)
    NULA            shift and go to state 14
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17

    pro_funcs                      shift and go to state 9
    empty                          shift and go to state 10
    pro_funcs_list                 shift and go to state 11
    funcs                          shift and go to state 12
    funcs_nt                       shift and go to state 13
    tipo                           shift and go to state 15

state 6

    (70) pro_vars -> empty .

    NULA            reduce using rule 70 (pro_vars -> empty .)
    ENTERO          reduce using rule 70 (pro_vars -> empty .)
    FLOTANTE        reduce using rule 70 (pro_vars -> empty .)
    INICIO          reduce using rule 70 (pro_vars -> empty .)


state 7

    (71) pro_vars -> vars .

    NULA            reduce using rule 71 (pro_vars -> vars .)
    ENTERO          reduce using rule 71 (pro_vars -> vars .)
    FLOTANTE        reduce using rule 71 (pro_vars -> vars .)
    INICIO          reduce using rule 71 (pro_vars -> vars .)


state 8

    (46) vars -> VARS . ID vars_todo

    ID              shift and go to state 18


state 9

    (69) programa -> PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs . INICIO cuerpo FIN

    INICIO          shift and go to state 19


state 10

    (72) pro_funcs -> empty .

    INICIO          reduce using rule 72 (pro_funcs -> empty .)


state 11

    (73) pro_funcs -> pro_funcs_list .
    (75) pro_funcs_list -> pro_funcs_list . funcs
    (52) funcs -> . funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA
    (53) funcs_nt -> . NULA
    (54) funcs_nt -> . tipo
    (1) tipo -> . ENTERO
    (2) tipo -> . FLOTANTE

    INICIO          reduce using rule 73 (pro_funcs -> pro_funcs_list .)
    NULA            shift and go to state 14
    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17

    funcs                          shift and go to state 20
    funcs_nt                       shift and go to state 13
    tipo                           shift and go to state 15

state 12

    (74) pro_funcs_list -> funcs .

    NULA            reduce using rule 74 (pro_funcs_list -> funcs .)
    ENTERO          reduce using rule 74 (pro_funcs_list -> funcs .)
    FLOTANTE        reduce using rule 74 (pro_funcs_list -> funcs .)
    INICIO          reduce using rule 74 (pro_funcs_list -> funcs .)


state 13

    (52) funcs -> funcs_nt . ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA

    ID              shift and go to state 21


state 14

    (53) funcs_nt -> NULA .

    ID              reduce using rule 53 (funcs_nt -> NULA .)


state 15

    (54) funcs_nt -> tipo .

    ID              reduce using rule 54 (funcs_nt -> tipo .)


state 16

    (1) tipo -> ENTERO .

    ID              reduce using rule 1 (tipo -> ENTERO .)
    PUNTO_Y_COMA    reduce using rule 1 (tipo -> ENTERO .)
    COMA            reduce using rule 1 (tipo -> ENTERO .)
    PAR_CIERRA      reduce using rule 1 (tipo -> ENTERO .)


state 17

    (2) tipo -> FLOTANTE .

    ID              reduce using rule 2 (tipo -> FLOTANTE .)
    PUNTO_Y_COMA    reduce using rule 2 (tipo -> FLOTANTE .)
    COMA            reduce using rule 2 (tipo -> FLOTANTE .)
    PAR_CIERRA      reduce using rule 2 (tipo -> FLOTANTE .)


state 18

    (46) vars -> VARS ID . vars_todo
    (47) vars_todo -> . vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final
    (48) vars_coma -> . empty
    (49) vars_coma -> . COMA ID vars_coma
    (76) empty -> .

    COMA            shift and go to state 25
    DOS_PUNTOS      reduce using rule 76 (empty -> .)

    vars_todo                      shift and go to state 22
    vars_coma                      shift and go to state 23
    empty                          shift and go to state 24

state 19

    (69) programa -> PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs INICIO . cuerpo FIN
    (14) cuerpo -> . LLAVE_ABRE cuerpo_estat LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 27

    cuerpo                         shift and go to state 26

state 20

    (75) pro_funcs_list -> pro_funcs_list funcs .

    NULA            reduce using rule 75 (pro_funcs_list -> pro_funcs_list funcs .)
    ENTERO          reduce using rule 75 (pro_funcs_list -> pro_funcs_list funcs .)
    FLOTANTE        reduce using rule 75 (pro_funcs_list -> pro_funcs_list funcs .)
    INICIO          reduce using rule 75 (pro_funcs_list -> pro_funcs_list funcs .)


state 21

    (52) funcs -> funcs_nt ID . PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA

    PAR_ABRE        shift and go to state 28


state 22

    (46) vars -> VARS ID vars_todo .

    NULA            reduce using rule 46 (vars -> VARS ID vars_todo .)
    ENTERO          reduce using rule 46 (vars -> VARS ID vars_todo .)
    FLOTANTE        reduce using rule 46 (vars -> VARS ID vars_todo .)
    INICIO          reduce using rule 46 (vars -> VARS ID vars_todo .)
    LLAVE_ABRE      reduce using rule 46 (vars -> VARS ID vars_todo .)


state 23

    (47) vars_todo -> vars_coma . DOS_PUNTOS tipo PUNTO_Y_COMA vars_final

    DOS_PUNTOS      shift and go to state 29


state 24

    (48) vars_coma -> empty .

    DOS_PUNTOS      reduce using rule 48 (vars_coma -> empty .)


state 25

    (49) vars_coma -> COMA . ID vars_coma

    ID              shift and go to state 30


state 26

    (69) programa -> PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo . FIN

    FIN             shift and go to state 31


state 27

    (14) cuerpo -> LLAVE_ABRE . cuerpo_estat LLAVE_CIERRA
    (15) cuerpo_estat -> . empty
    (16) cuerpo_estat -> . estatuto cuerpo_estat
    (76) empty -> .
    (6) estatuto -> . asigna
    (7) estatuto -> . condicion
    (8) estatuto -> . ciclo
    (9) estatuto -> . llamada PUNTO_Y_COMA
    (10) estatuto -> . imprime
    (11) estatuto -> . CORA_ABRE list_estatuto CORA_CIERRA
    (5) asigna -> . ID OP_ASIG expresion PUNTO_Y_COMA
    (24) condicion -> . SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA
    (23) ciclo -> . MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA
    (32) llamada -> . ID PAR_ABRE llamada_expresion PAR_CIERRA
    (27) imprime -> . ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA

    LLAVE_CIERRA    reduce using rule 76 (empty -> .)
    CORA_ABRE       shift and go to state 40
    ID              shift and go to state 41
    SI              shift and go to state 42
    MIENTRAS        shift and go to state 43
    ESCRIBE         shift and go to state 44

    cuerpo_estat                   shift and go to state 32
    empty                          shift and go to state 33
    estatuto                       shift and go to state 34
    asigna                         shift and go to state 35
    condicion                      shift and go to state 36
    ciclo                          shift and go to state 37
    llamada                        shift and go to state 38
    imprime                        shift and go to state 39

state 28

    (52) funcs -> funcs_nt ID PAR_ABRE . func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA
    (55) func_tipo -> . empty
    (56) func_tipo -> . ID DOS_PUNTOS tipo funcs_coma
    (76) empty -> .

    ID              shift and go to state 45
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    func_tipo                      shift and go to state 46
    empty                          shift and go to state 47

state 29

    (47) vars_todo -> vars_coma DOS_PUNTOS . tipo PUNTO_Y_COMA vars_final
    (1) tipo -> . ENTERO
    (2) tipo -> . FLOTANTE

    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17

    tipo                           shift and go to state 48

state 30

    (49) vars_coma -> COMA ID . vars_coma
    (48) vars_coma -> . empty
    (49) vars_coma -> . COMA ID vars_coma
    (76) empty -> .

    COMA            shift and go to state 25
    DOS_PUNTOS      reduce using rule 76 (empty -> .)

    vars_coma                      shift and go to state 49
    empty                          shift and go to state 24

state 31

    (69) programa -> PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo FIN .

    $end            reduce using rule 69 (programa -> PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo FIN .)


state 32

    (14) cuerpo -> LLAVE_ABRE cuerpo_estat . LLAVE_CIERRA

    LLAVE_CIERRA    shift and go to state 50


state 33

    (15) cuerpo_estat -> empty .

    LLAVE_CIERRA    reduce using rule 15 (cuerpo_estat -> empty .)


state 34

    (16) cuerpo_estat -> estatuto . cuerpo_estat
    (15) cuerpo_estat -> . empty
    (16) cuerpo_estat -> . estatuto cuerpo_estat
    (76) empty -> .
    (6) estatuto -> . asigna
    (7) estatuto -> . condicion
    (8) estatuto -> . ciclo
    (9) estatuto -> . llamada PUNTO_Y_COMA
    (10) estatuto -> . imprime
    (11) estatuto -> . CORA_ABRE list_estatuto CORA_CIERRA
    (5) asigna -> . ID OP_ASIG expresion PUNTO_Y_COMA
    (24) condicion -> . SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA
    (23) ciclo -> . MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA
    (32) llamada -> . ID PAR_ABRE llamada_expresion PAR_CIERRA
    (27) imprime -> . ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA

    LLAVE_CIERRA    reduce using rule 76 (empty -> .)
    CORA_ABRE       shift and go to state 40
    ID              shift and go to state 41
    SI              shift and go to state 42
    MIENTRAS        shift and go to state 43
    ESCRIBE         shift and go to state 44

    estatuto                       shift and go to state 34
    cuerpo_estat                   shift and go to state 51
    empty                          shift and go to state 33
    asigna                         shift and go to state 35
    condicion                      shift and go to state 36
    ciclo                          shift and go to state 37
    llamada                        shift and go to state 38
    imprime                        shift and go to state 39

state 35

    (6) estatuto -> asigna .

    CORA_ABRE       reduce using rule 6 (estatuto -> asigna .)
    ID              reduce using rule 6 (estatuto -> asigna .)
    SI              reduce using rule 6 (estatuto -> asigna .)
    MIENTRAS        reduce using rule 6 (estatuto -> asigna .)
    ESCRIBE         reduce using rule 6 (estatuto -> asigna .)
    LLAVE_CIERRA    reduce using rule 6 (estatuto -> asigna .)
    CORA_CIERRA     reduce using rule 6 (estatuto -> asigna .)


state 36

    (7) estatuto -> condicion .

    CORA_ABRE       reduce using rule 7 (estatuto -> condicion .)
    ID              reduce using rule 7 (estatuto -> condicion .)
    SI              reduce using rule 7 (estatuto -> condicion .)
    MIENTRAS        reduce using rule 7 (estatuto -> condicion .)
    ESCRIBE         reduce using rule 7 (estatuto -> condicion .)
    LLAVE_CIERRA    reduce using rule 7 (estatuto -> condicion .)
    CORA_CIERRA     reduce using rule 7 (estatuto -> condicion .)


state 37

    (8) estatuto -> ciclo .

    CORA_ABRE       reduce using rule 8 (estatuto -> ciclo .)
    ID              reduce using rule 8 (estatuto -> ciclo .)
    SI              reduce using rule 8 (estatuto -> ciclo .)
    MIENTRAS        reduce using rule 8 (estatuto -> ciclo .)
    ESCRIBE         reduce using rule 8 (estatuto -> ciclo .)
    LLAVE_CIERRA    reduce using rule 8 (estatuto -> ciclo .)
    CORA_CIERRA     reduce using rule 8 (estatuto -> ciclo .)


state 38

    (9) estatuto -> llamada . PUNTO_Y_COMA

    PUNTO_Y_COMA    shift and go to state 52


state 39

    (10) estatuto -> imprime .

    CORA_ABRE       reduce using rule 10 (estatuto -> imprime .)
    ID              reduce using rule 10 (estatuto -> imprime .)
    SI              reduce using rule 10 (estatuto -> imprime .)
    MIENTRAS        reduce using rule 10 (estatuto -> imprime .)
    ESCRIBE         reduce using rule 10 (estatuto -> imprime .)
    LLAVE_CIERRA    reduce using rule 10 (estatuto -> imprime .)
    CORA_CIERRA     reduce using rule 10 (estatuto -> imprime .)


state 40

    (11) estatuto -> CORA_ABRE . list_estatuto CORA_CIERRA
    (12) list_estatuto -> . empty
    (13) list_estatuto -> . estatuto list_estatuto
    (76) empty -> .
    (6) estatuto -> . asigna
    (7) estatuto -> . condicion
    (8) estatuto -> . ciclo
    (9) estatuto -> . llamada PUNTO_Y_COMA
    (10) estatuto -> . imprime
    (11) estatuto -> . CORA_ABRE list_estatuto CORA_CIERRA
    (5) asigna -> . ID OP_ASIG expresion PUNTO_Y_COMA
    (24) condicion -> . SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA
    (23) ciclo -> . MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA
    (32) llamada -> . ID PAR_ABRE llamada_expresion PAR_CIERRA
    (27) imprime -> . ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA

    CORA_CIERRA     reduce using rule 76 (empty -> .)
    CORA_ABRE       shift and go to state 40
    ID              shift and go to state 41
    SI              shift and go to state 42
    MIENTRAS        shift and go to state 43
    ESCRIBE         shift and go to state 44

    list_estatuto                  shift and go to state 53
    empty                          shift and go to state 54
    estatuto                       shift and go to state 55
    asigna                         shift and go to state 35
    condicion                      shift and go to state 36
    ciclo                          shift and go to state 37
    llamada                        shift and go to state 38
    imprime                        shift and go to state 39

state 41

    (5) asigna -> ID . OP_ASIG expresion PUNTO_Y_COMA
    (32) llamada -> ID . PAR_ABRE llamada_expresion PAR_CIERRA

    OP_ASIG         shift and go to state 56
    PAR_ABRE        shift and go to state 57


state 42

    (24) condicion -> SI . PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA

    PAR_ABRE        shift and go to state 58


state 43

    (23) ciclo -> MIENTRAS . PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA

    PAR_ABRE        shift and go to state 59


state 44

    (27) imprime -> ESCRIBE . PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA

    PAR_ABRE        shift and go to state 60


state 45

    (56) func_tipo -> ID . DOS_PUNTOS tipo funcs_coma

    DOS_PUNTOS      shift and go to state 61


state 46

    (52) funcs -> funcs_nt ID PAR_ABRE func_tipo . PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA

    PAR_CIERRA      shift and go to state 62


state 47

    (55) func_tipo -> empty .

    PAR_CIERRA      reduce using rule 55 (func_tipo -> empty .)


state 48

    (47) vars_todo -> vars_coma DOS_PUNTOS tipo . PUNTO_Y_COMA vars_final

    PUNTO_Y_COMA    shift and go to state 63


state 49

    (49) vars_coma -> COMA ID vars_coma .

    DOS_PUNTOS      reduce using rule 49 (vars_coma -> COMA ID vars_coma .)


state 50

    (14) cuerpo -> LLAVE_ABRE cuerpo_estat LLAVE_CIERRA .

    FIN             reduce using rule 14 (cuerpo -> LLAVE_ABRE cuerpo_estat LLAVE_CIERRA .)
    SINO            reduce using rule 14 (cuerpo -> LLAVE_ABRE cuerpo_estat LLAVE_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 14 (cuerpo -> LLAVE_ABRE cuerpo_estat LLAVE_CIERRA .)
    LLAVE_CIERRA    reduce using rule 14 (cuerpo -> LLAVE_ABRE cuerpo_estat LLAVE_CIERRA .)


state 51

    (16) cuerpo_estat -> estatuto cuerpo_estat .

    LLAVE_CIERRA    reduce using rule 16 (cuerpo_estat -> estatuto cuerpo_estat .)


state 52

    (9) estatuto -> llamada PUNTO_Y_COMA .

    CORA_ABRE       reduce using rule 9 (estatuto -> llamada PUNTO_Y_COMA .)
    ID              reduce using rule 9 (estatuto -> llamada PUNTO_Y_COMA .)
    SI              reduce using rule 9 (estatuto -> llamada PUNTO_Y_COMA .)
    MIENTRAS        reduce using rule 9 (estatuto -> llamada PUNTO_Y_COMA .)
    ESCRIBE         reduce using rule 9 (estatuto -> llamada PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 9 (estatuto -> llamada PUNTO_Y_COMA .)
    CORA_CIERRA     reduce using rule 9 (estatuto -> llamada PUNTO_Y_COMA .)


state 53

    (11) estatuto -> CORA_ABRE list_estatuto . CORA_CIERRA

    CORA_CIERRA     shift and go to state 64


state 54

    (12) list_estatuto -> empty .

    CORA_CIERRA     reduce using rule 12 (list_estatuto -> empty .)


state 55

    (13) list_estatuto -> estatuto . list_estatuto
    (12) list_estatuto -> . empty
    (13) list_estatuto -> . estatuto list_estatuto
    (76) empty -> .
    (6) estatuto -> . asigna
    (7) estatuto -> . condicion
    (8) estatuto -> . ciclo
    (9) estatuto -> . llamada PUNTO_Y_COMA
    (10) estatuto -> . imprime
    (11) estatuto -> . CORA_ABRE list_estatuto CORA_CIERRA
    (5) asigna -> . ID OP_ASIG expresion PUNTO_Y_COMA
    (24) condicion -> . SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA
    (23) ciclo -> . MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA
    (32) llamada -> . ID PAR_ABRE llamada_expresion PAR_CIERRA
    (27) imprime -> . ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA

    CORA_CIERRA     reduce using rule 76 (empty -> .)
    CORA_ABRE       shift and go to state 40
    ID              shift and go to state 41
    SI              shift and go to state 42
    MIENTRAS        shift and go to state 43
    ESCRIBE         shift and go to state 44

    estatuto                       shift and go to state 55
    list_estatuto                  shift and go to state 65
    empty                          shift and go to state 54
    asigna                         shift and go to state 35
    condicion                      shift and go to state 36
    ciclo                          shift and go to state 37
    llamada                        shift and go to state 38
    imprime                        shift and go to state 39

state 56

    (5) asigna -> ID OP_ASIG . expresion PUNTO_Y_COMA
    (17) expresion -> . exp expresion_exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    expresion                      shift and go to state 66
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 57

    (32) llamada -> ID PAR_ABRE . llamada_expresion PAR_CIERRA
    (33) llamada_expresion -> . empty
    (34) llamada_expresion -> . expresion llamada_ex
    (76) empty -> .
    (17) expresion -> . exp expresion_exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_CIERRA      reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    PAR_ABRE        shift and go to state 70
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    llamada_expresion              shift and go to state 76
    empty                          shift and go to state 77
    expresion                      shift and go to state 78
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    factor_rs                      shift and go to state 73

state 58

    (24) condicion -> SI PAR_ABRE . expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA
    (17) expresion -> . exp expresion_exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    expresion                      shift and go to state 79
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 59

    (23) ciclo -> MIENTRAS PAR_ABRE . expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA
    (17) expresion -> . exp expresion_exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    expresion                      shift and go to state 80
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 60

    (27) imprime -> ESCRIBE PAR_ABRE . imprime_exp PAR_CIERRA PUNTO_Y_COMA
    (28) imprime_exp -> . expresion imprime_exp_p
    (29) imprime_exp -> . LETRERO imprime_exp_p
    (17) expresion -> . exp expresion_exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    LETRERO         shift and go to state 83
    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    imprime_exp                    shift and go to state 81
    expresion                      shift and go to state 82
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 61

    (56) func_tipo -> ID DOS_PUNTOS . tipo funcs_coma
    (1) tipo -> . ENTERO
    (2) tipo -> . FLOTANTE

    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17

    tipo                           shift and go to state 84

state 62

    (52) funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA . LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA

    LLAVE_ABRE      shift and go to state 85


state 63

    (47) vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA . vars_final
    (50) vars_final -> . empty
    (51) vars_final -> . vars_todo
    (76) empty -> .
    (47) vars_todo -> . vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final
    (48) vars_coma -> . empty
    (49) vars_coma -> . COMA ID vars_coma

    NULA            reduce using rule 76 (empty -> .)
    ENTERO          reduce using rule 76 (empty -> .)
    FLOTANTE        reduce using rule 76 (empty -> .)
    INICIO          reduce using rule 76 (empty -> .)
    LLAVE_ABRE      reduce using rule 76 (empty -> .)
    DOS_PUNTOS      reduce using rule 76 (empty -> .)
    COMA            shift and go to state 25

    vars_coma                      shift and go to state 23
    vars_final                     shift and go to state 86
    empty                          shift and go to state 87
    vars_todo                      shift and go to state 88

state 64

    (11) estatuto -> CORA_ABRE list_estatuto CORA_CIERRA .

    CORA_ABRE       reduce using rule 11 (estatuto -> CORA_ABRE list_estatuto CORA_CIERRA .)
    ID              reduce using rule 11 (estatuto -> CORA_ABRE list_estatuto CORA_CIERRA .)
    SI              reduce using rule 11 (estatuto -> CORA_ABRE list_estatuto CORA_CIERRA .)
    MIENTRAS        reduce using rule 11 (estatuto -> CORA_ABRE list_estatuto CORA_CIERRA .)
    ESCRIBE         reduce using rule 11 (estatuto -> CORA_ABRE list_estatuto CORA_CIERRA .)
    LLAVE_CIERRA    reduce using rule 11 (estatuto -> CORA_ABRE list_estatuto CORA_CIERRA .)
    CORA_CIERRA     reduce using rule 11 (estatuto -> CORA_ABRE list_estatuto CORA_CIERRA .)


state 65

    (13) list_estatuto -> estatuto list_estatuto .

    CORA_CIERRA     reduce using rule 13 (list_estatuto -> estatuto list_estatuto .)


state 66

    (5) asigna -> ID OP_ASIG expresion . PUNTO_Y_COMA

    PUNTO_Y_COMA    shift and go to state 89


state 67

    (17) expresion -> exp . expresion_exp
    (18) expresion_exp -> . empty
    (19) expresion_exp -> . OP_MAYOR exp
    (20) expresion_exp -> . OP_MENOR exp
    (21) expresion_exp -> . OP_DIF exp
    (22) expresion_exp -> . OP_IGUAL exp
    (76) empty -> .

    OP_MAYOR        shift and go to state 92
    OP_MENOR        shift and go to state 93
    OP_DIF          shift and go to state 94
    OP_IGUAL        shift and go to state 95
    PUNTO_Y_COMA    reduce using rule 76 (empty -> .)
    COMA            reduce using rule 76 (empty -> .)
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    expresion_exp                  shift and go to state 90
    empty                          shift and go to state 91

state 68

    (61) exp -> termino . exp_termino
    (62) exp_termino -> . empty
    (63) exp_termino -> . OP_SUMA exp
    (64) exp_termino -> . OP_RESTA exp
    (76) empty -> .

    OP_SUMA         shift and go to state 98
    OP_RESTA        shift and go to state 99
    OP_MAYOR        reduce using rule 76 (empty -> .)
    OP_MENOR        reduce using rule 76 (empty -> .)
    OP_DIF          reduce using rule 76 (empty -> .)
    OP_IGUAL        reduce using rule 76 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 76 (empty -> .)
    COMA            reduce using rule 76 (empty -> .)
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    exp_termino                    shift and go to state 96
    empty                          shift and go to state 97

state 69

    (65) termino -> factor . termino_factor
    (66) termino_factor -> . empty
    (67) termino_factor -> . OP_MULT termino
    (68) termino_factor -> . OP_DIV termino
    (76) empty -> .

    OP_MULT         shift and go to state 102
    OP_DIV          shift and go to state 103
    OP_SUMA         reduce using rule 76 (empty -> .)
    OP_RESTA        reduce using rule 76 (empty -> .)
    OP_MAYOR        reduce using rule 76 (empty -> .)
    OP_MENOR        reduce using rule 76 (empty -> .)
    OP_DIF          reduce using rule 76 (empty -> .)
    OP_IGUAL        reduce using rule 76 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 76 (empty -> .)
    COMA            reduce using rule 76 (empty -> .)
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    termino_factor                 shift and go to state 100
    empty                          shift and go to state 101

state 70

    (37) factor -> PAR_ABRE . expresion PAR_CIERRA
    (17) expresion -> . exp expresion_exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    expresion                      shift and go to state 104
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 71

    (38) factor -> factor_sr . factor_cte
    (43) factor_cte -> . ID
    (44) factor_cte -> . cte
    (45) factor_cte -> . llamada
    (3) cte -> . CTE_ENT
    (4) cte -> . CTE_FLOT
    (32) llamada -> . ID PAR_ABRE llamada_expresion PAR_CIERRA

    ID              shift and go to state 106
    CTE_ENT         shift and go to state 109
    CTE_FLOT        shift and go to state 110

    factor_cte                     shift and go to state 105
    cte                            shift and go to state 107
    llamada                        shift and go to state 108

state 72

    (39) factor_sr -> empty .

    ID              reduce using rule 39 (factor_sr -> empty .)
    CTE_ENT         reduce using rule 39 (factor_sr -> empty .)
    CTE_FLOT        reduce using rule 39 (factor_sr -> empty .)


state 73

    (40) factor_sr -> factor_rs .

    ID              reduce using rule 40 (factor_sr -> factor_rs .)
    CTE_ENT         reduce using rule 40 (factor_sr -> factor_rs .)
    CTE_FLOT        reduce using rule 40 (factor_sr -> factor_rs .)


state 74

    (41) factor_rs -> OP_SUMA .

    ID              reduce using rule 41 (factor_rs -> OP_SUMA .)
    CTE_ENT         reduce using rule 41 (factor_rs -> OP_SUMA .)
    CTE_FLOT        reduce using rule 41 (factor_rs -> OP_SUMA .)


state 75

    (42) factor_rs -> OP_RESTA .

    ID              reduce using rule 42 (factor_rs -> OP_RESTA .)
    CTE_ENT         reduce using rule 42 (factor_rs -> OP_RESTA .)
    CTE_FLOT        reduce using rule 42 (factor_rs -> OP_RESTA .)


state 76

    (32) llamada -> ID PAR_ABRE llamada_expresion . PAR_CIERRA

    PAR_CIERRA      shift and go to state 111


state 77

    (33) llamada_expresion -> empty .
    (39) factor_sr -> empty .

    PAR_CIERRA      reduce using rule 33 (llamada_expresion -> empty .)
    ID              reduce using rule 39 (factor_sr -> empty .)
    CTE_ENT         reduce using rule 39 (factor_sr -> empty .)
    CTE_FLOT        reduce using rule 39 (factor_sr -> empty .)


state 78

    (34) llamada_expresion -> expresion . llamada_ex
    (35) llamada_ex -> . empty
    (36) llamada_ex -> . COMA expresion llamada_ex
    (76) empty -> .

    COMA            shift and go to state 114
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    llamada_ex                     shift and go to state 112
    empty                          shift and go to state 113

state 79

    (24) condicion -> SI PAR_ABRE expresion . PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA

    PAR_CIERRA      shift and go to state 115


state 80

    (23) ciclo -> MIENTRAS PAR_ABRE expresion . PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA

    PAR_CIERRA      shift and go to state 116


state 81

    (27) imprime -> ESCRIBE PAR_ABRE imprime_exp . PAR_CIERRA PUNTO_Y_COMA

    PAR_CIERRA      shift and go to state 117


state 82

    (28) imprime_exp -> expresion . imprime_exp_p
    (30) imprime_exp_p -> . empty
    (31) imprime_exp_p -> . COMA imprime_exp
    (76) empty -> .

    COMA            shift and go to state 120
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    imprime_exp_p                  shift and go to state 118
    empty                          shift and go to state 119

state 83

    (29) imprime_exp -> LETRERO . imprime_exp_p
    (30) imprime_exp_p -> . empty
    (31) imprime_exp_p -> . COMA imprime_exp
    (76) empty -> .

    COMA            shift and go to state 120
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    imprime_exp_p                  shift and go to state 121
    empty                          shift and go to state 119

state 84

    (56) func_tipo -> ID DOS_PUNTOS tipo . funcs_coma
    (57) funcs_coma -> . empty
    (58) funcs_coma -> . COMA ID DOS_PUNTOS tipo funcs_coma
    (76) empty -> .

    COMA            shift and go to state 124
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    funcs_coma                     shift and go to state 122
    empty                          shift and go to state 123

state 85

    (52) funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE . func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA
    (59) func_vars -> . empty
    (60) func_vars -> . vars
    (76) empty -> .
    (46) vars -> . VARS ID vars_todo

    LLAVE_ABRE      reduce using rule 76 (empty -> .)
    VARS            shift and go to state 8

    func_vars                      shift and go to state 125
    empty                          shift and go to state 126
    vars                           shift and go to state 127

state 86

    (47) vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final .

    NULA            reduce using rule 47 (vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final .)
    ENTERO          reduce using rule 47 (vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final .)
    FLOTANTE        reduce using rule 47 (vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final .)
    INICIO          reduce using rule 47 (vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final .)
    LLAVE_ABRE      reduce using rule 47 (vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final .)


state 87

    (50) vars_final -> empty .
    (48) vars_coma -> empty .

    NULA            reduce using rule 50 (vars_final -> empty .)
    ENTERO          reduce using rule 50 (vars_final -> empty .)
    FLOTANTE        reduce using rule 50 (vars_final -> empty .)
    INICIO          reduce using rule 50 (vars_final -> empty .)
    LLAVE_ABRE      reduce using rule 50 (vars_final -> empty .)
    DOS_PUNTOS      reduce using rule 48 (vars_coma -> empty .)


state 88

    (51) vars_final -> vars_todo .

    NULA            reduce using rule 51 (vars_final -> vars_todo .)
    ENTERO          reduce using rule 51 (vars_final -> vars_todo .)
    FLOTANTE        reduce using rule 51 (vars_final -> vars_todo .)
    INICIO          reduce using rule 51 (vars_final -> vars_todo .)
    LLAVE_ABRE      reduce using rule 51 (vars_final -> vars_todo .)


state 89

    (5) asigna -> ID OP_ASIG expresion PUNTO_Y_COMA .

    CORA_ABRE       reduce using rule 5 (asigna -> ID OP_ASIG expresion PUNTO_Y_COMA .)
    ID              reduce using rule 5 (asigna -> ID OP_ASIG expresion PUNTO_Y_COMA .)
    SI              reduce using rule 5 (asigna -> ID OP_ASIG expresion PUNTO_Y_COMA .)
    MIENTRAS        reduce using rule 5 (asigna -> ID OP_ASIG expresion PUNTO_Y_COMA .)
    ESCRIBE         reduce using rule 5 (asigna -> ID OP_ASIG expresion PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 5 (asigna -> ID OP_ASIG expresion PUNTO_Y_COMA .)
    CORA_CIERRA     reduce using rule 5 (asigna -> ID OP_ASIG expresion PUNTO_Y_COMA .)


state 90

    (17) expresion -> exp expresion_exp .

    PUNTO_Y_COMA    reduce using rule 17 (expresion -> exp expresion_exp .)
    COMA            reduce using rule 17 (expresion -> exp expresion_exp .)
    PAR_CIERRA      reduce using rule 17 (expresion -> exp expresion_exp .)


state 91

    (18) expresion_exp -> empty .

    PUNTO_Y_COMA    reduce using rule 18 (expresion_exp -> empty .)
    COMA            reduce using rule 18 (expresion_exp -> empty .)
    PAR_CIERRA      reduce using rule 18 (expresion_exp -> empty .)


state 92

    (19) expresion_exp -> OP_MAYOR . exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    exp                            shift and go to state 128
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 93

    (20) expresion_exp -> OP_MENOR . exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    exp                            shift and go to state 129
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 94

    (21) expresion_exp -> OP_DIF . exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    exp                            shift and go to state 130
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 95

    (22) expresion_exp -> OP_IGUAL . exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    exp                            shift and go to state 131
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 96

    (61) exp -> termino exp_termino .

    OP_MAYOR        reduce using rule 61 (exp -> termino exp_termino .)
    OP_MENOR        reduce using rule 61 (exp -> termino exp_termino .)
    OP_DIF          reduce using rule 61 (exp -> termino exp_termino .)
    OP_IGUAL        reduce using rule 61 (exp -> termino exp_termino .)
    PUNTO_Y_COMA    reduce using rule 61 (exp -> termino exp_termino .)
    COMA            reduce using rule 61 (exp -> termino exp_termino .)
    PAR_CIERRA      reduce using rule 61 (exp -> termino exp_termino .)


state 97

    (62) exp_termino -> empty .

    OP_MAYOR        reduce using rule 62 (exp_termino -> empty .)
    OP_MENOR        reduce using rule 62 (exp_termino -> empty .)
    OP_DIF          reduce using rule 62 (exp_termino -> empty .)
    OP_IGUAL        reduce using rule 62 (exp_termino -> empty .)
    PUNTO_Y_COMA    reduce using rule 62 (exp_termino -> empty .)
    COMA            reduce using rule 62 (exp_termino -> empty .)
    PAR_CIERRA      reduce using rule 62 (exp_termino -> empty .)


state 98

    (63) exp_termino -> OP_SUMA . exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    exp                            shift and go to state 132
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 99

    (64) exp_termino -> OP_RESTA . exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    exp                            shift and go to state 133
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 100

    (65) termino -> factor termino_factor .

    OP_SUMA         reduce using rule 65 (termino -> factor termino_factor .)
    OP_RESTA        reduce using rule 65 (termino -> factor termino_factor .)
    OP_MAYOR        reduce using rule 65 (termino -> factor termino_factor .)
    OP_MENOR        reduce using rule 65 (termino -> factor termino_factor .)
    OP_DIF          reduce using rule 65 (termino -> factor termino_factor .)
    OP_IGUAL        reduce using rule 65 (termino -> factor termino_factor .)
    PUNTO_Y_COMA    reduce using rule 65 (termino -> factor termino_factor .)
    COMA            reduce using rule 65 (termino -> factor termino_factor .)
    PAR_CIERRA      reduce using rule 65 (termino -> factor termino_factor .)


state 101

    (66) termino_factor -> empty .

    OP_SUMA         reduce using rule 66 (termino_factor -> empty .)
    OP_RESTA        reduce using rule 66 (termino_factor -> empty .)
    OP_MAYOR        reduce using rule 66 (termino_factor -> empty .)
    OP_MENOR        reduce using rule 66 (termino_factor -> empty .)
    OP_DIF          reduce using rule 66 (termino_factor -> empty .)
    OP_IGUAL        reduce using rule 66 (termino_factor -> empty .)
    PUNTO_Y_COMA    reduce using rule 66 (termino_factor -> empty .)
    COMA            reduce using rule 66 (termino_factor -> empty .)
    PAR_CIERRA      reduce using rule 66 (termino_factor -> empty .)


state 102

    (67) termino_factor -> OP_MULT . termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    termino                        shift and go to state 134
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 103

    (68) termino_factor -> OP_DIV . termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    termino                        shift and go to state 135
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 104

    (37) factor -> PAR_ABRE expresion . PAR_CIERRA

    PAR_CIERRA      shift and go to state 136


state 105

    (38) factor -> factor_sr factor_cte .

    OP_MULT         reduce using rule 38 (factor -> factor_sr factor_cte .)
    OP_DIV          reduce using rule 38 (factor -> factor_sr factor_cte .)
    OP_SUMA         reduce using rule 38 (factor -> factor_sr factor_cte .)
    OP_RESTA        reduce using rule 38 (factor -> factor_sr factor_cte .)
    OP_MAYOR        reduce using rule 38 (factor -> factor_sr factor_cte .)
    OP_MENOR        reduce using rule 38 (factor -> factor_sr factor_cte .)
    OP_DIF          reduce using rule 38 (factor -> factor_sr factor_cte .)
    OP_IGUAL        reduce using rule 38 (factor -> factor_sr factor_cte .)
    PUNTO_Y_COMA    reduce using rule 38 (factor -> factor_sr factor_cte .)
    COMA            reduce using rule 38 (factor -> factor_sr factor_cte .)
    PAR_CIERRA      reduce using rule 38 (factor -> factor_sr factor_cte .)


state 106

    (43) factor_cte -> ID .
    (32) llamada -> ID . PAR_ABRE llamada_expresion PAR_CIERRA

    OP_MULT         reduce using rule 43 (factor_cte -> ID .)
    OP_DIV          reduce using rule 43 (factor_cte -> ID .)
    OP_SUMA         reduce using rule 43 (factor_cte -> ID .)
    OP_RESTA        reduce using rule 43 (factor_cte -> ID .)
    OP_MAYOR        reduce using rule 43 (factor_cte -> ID .)
    OP_MENOR        reduce using rule 43 (factor_cte -> ID .)
    OP_DIF          reduce using rule 43 (factor_cte -> ID .)
    OP_IGUAL        reduce using rule 43 (factor_cte -> ID .)
    PUNTO_Y_COMA    reduce using rule 43 (factor_cte -> ID .)
    COMA            reduce using rule 43 (factor_cte -> ID .)
    PAR_CIERRA      reduce using rule 43 (factor_cte -> ID .)
    PAR_ABRE        shift and go to state 57


state 107

    (44) factor_cte -> cte .

    OP_MULT         reduce using rule 44 (factor_cte -> cte .)
    OP_DIV          reduce using rule 44 (factor_cte -> cte .)
    OP_SUMA         reduce using rule 44 (factor_cte -> cte .)
    OP_RESTA        reduce using rule 44 (factor_cte -> cte .)
    OP_MAYOR        reduce using rule 44 (factor_cte -> cte .)
    OP_MENOR        reduce using rule 44 (factor_cte -> cte .)
    OP_DIF          reduce using rule 44 (factor_cte -> cte .)
    OP_IGUAL        reduce using rule 44 (factor_cte -> cte .)
    PUNTO_Y_COMA    reduce using rule 44 (factor_cte -> cte .)
    COMA            reduce using rule 44 (factor_cte -> cte .)
    PAR_CIERRA      reduce using rule 44 (factor_cte -> cte .)


state 108

    (45) factor_cte -> llamada .

    OP_MULT         reduce using rule 45 (factor_cte -> llamada .)
    OP_DIV          reduce using rule 45 (factor_cte -> llamada .)
    OP_SUMA         reduce using rule 45 (factor_cte -> llamada .)
    OP_RESTA        reduce using rule 45 (factor_cte -> llamada .)
    OP_MAYOR        reduce using rule 45 (factor_cte -> llamada .)
    OP_MENOR        reduce using rule 45 (factor_cte -> llamada .)
    OP_DIF          reduce using rule 45 (factor_cte -> llamada .)
    OP_IGUAL        reduce using rule 45 (factor_cte -> llamada .)
    PUNTO_Y_COMA    reduce using rule 45 (factor_cte -> llamada .)
    COMA            reduce using rule 45 (factor_cte -> llamada .)
    PAR_CIERRA      reduce using rule 45 (factor_cte -> llamada .)


state 109

    (3) cte -> CTE_ENT .

    OP_MULT         reduce using rule 3 (cte -> CTE_ENT .)
    OP_DIV          reduce using rule 3 (cte -> CTE_ENT .)
    OP_SUMA         reduce using rule 3 (cte -> CTE_ENT .)
    OP_RESTA        reduce using rule 3 (cte -> CTE_ENT .)
    OP_MAYOR        reduce using rule 3 (cte -> CTE_ENT .)
    OP_MENOR        reduce using rule 3 (cte -> CTE_ENT .)
    OP_DIF          reduce using rule 3 (cte -> CTE_ENT .)
    OP_IGUAL        reduce using rule 3 (cte -> CTE_ENT .)
    PUNTO_Y_COMA    reduce using rule 3 (cte -> CTE_ENT .)
    COMA            reduce using rule 3 (cte -> CTE_ENT .)
    PAR_CIERRA      reduce using rule 3 (cte -> CTE_ENT .)


state 110

    (4) cte -> CTE_FLOT .

    OP_MULT         reduce using rule 4 (cte -> CTE_FLOT .)
    OP_DIV          reduce using rule 4 (cte -> CTE_FLOT .)
    OP_SUMA         reduce using rule 4 (cte -> CTE_FLOT .)
    OP_RESTA        reduce using rule 4 (cte -> CTE_FLOT .)
    OP_MAYOR        reduce using rule 4 (cte -> CTE_FLOT .)
    OP_MENOR        reduce using rule 4 (cte -> CTE_FLOT .)
    OP_DIF          reduce using rule 4 (cte -> CTE_FLOT .)
    OP_IGUAL        reduce using rule 4 (cte -> CTE_FLOT .)
    PUNTO_Y_COMA    reduce using rule 4 (cte -> CTE_FLOT .)
    COMA            reduce using rule 4 (cte -> CTE_FLOT .)
    PAR_CIERRA      reduce using rule 4 (cte -> CTE_FLOT .)


state 111

    (32) llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .

    PUNTO_Y_COMA    reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    OP_MULT         reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    OP_DIV          reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    OP_SUMA         reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    OP_RESTA        reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    OP_MAYOR        reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    OP_MENOR        reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    OP_DIF          reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    OP_IGUAL        reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    COMA            reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)
    PAR_CIERRA      reduce using rule 32 (llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA .)


state 112

    (34) llamada_expresion -> expresion llamada_ex .

    PAR_CIERRA      reduce using rule 34 (llamada_expresion -> expresion llamada_ex .)


state 113

    (35) llamada_ex -> empty .

    PAR_CIERRA      reduce using rule 35 (llamada_ex -> empty .)


state 114

    (36) llamada_ex -> COMA . expresion llamada_ex
    (17) expresion -> . exp expresion_exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    expresion                      shift and go to state 137
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 115

    (24) condicion -> SI PAR_ABRE expresion PAR_CIERRA . cuerpo condicion_cuerpo PUNTO_Y_COMA
    (14) cuerpo -> . LLAVE_ABRE cuerpo_estat LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 27

    cuerpo                         shift and go to state 138

state 116

    (23) ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA . HAZ cuerpo PUNTO_Y_COMA

    HAZ             shift and go to state 139


state 117

    (27) imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA . PUNTO_Y_COMA

    PUNTO_Y_COMA    shift and go to state 140


state 118

    (28) imprime_exp -> expresion imprime_exp_p .

    PAR_CIERRA      reduce using rule 28 (imprime_exp -> expresion imprime_exp_p .)


state 119

    (30) imprime_exp_p -> empty .

    PAR_CIERRA      reduce using rule 30 (imprime_exp_p -> empty .)


state 120

    (31) imprime_exp_p -> COMA . imprime_exp
    (28) imprime_exp -> . expresion imprime_exp_p
    (29) imprime_exp -> . LETRERO imprime_exp_p
    (17) expresion -> . exp expresion_exp
    (61) exp -> . termino exp_termino
    (65) termino -> . factor termino_factor
    (37) factor -> . PAR_ABRE expresion PAR_CIERRA
    (38) factor -> . factor_sr factor_cte
    (39) factor_sr -> . empty
    (40) factor_sr -> . factor_rs
    (76) empty -> .
    (41) factor_rs -> . OP_SUMA
    (42) factor_rs -> . OP_RESTA

    LETRERO         shift and go to state 83
    PAR_ABRE        shift and go to state 70
    ID              reduce using rule 76 (empty -> .)
    CTE_ENT         reduce using rule 76 (empty -> .)
    CTE_FLOT        reduce using rule 76 (empty -> .)
    OP_SUMA         shift and go to state 74
    OP_RESTA        shift and go to state 75

    imprime_exp                    shift and go to state 141
    expresion                      shift and go to state 82
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    factor_sr                      shift and go to state 71
    empty                          shift and go to state 72
    factor_rs                      shift and go to state 73

state 121

    (29) imprime_exp -> LETRERO imprime_exp_p .

    PAR_CIERRA      reduce using rule 29 (imprime_exp -> LETRERO imprime_exp_p .)


state 122

    (56) func_tipo -> ID DOS_PUNTOS tipo funcs_coma .

    PAR_CIERRA      reduce using rule 56 (func_tipo -> ID DOS_PUNTOS tipo funcs_coma .)


state 123

    (57) funcs_coma -> empty .

    PAR_CIERRA      reduce using rule 57 (funcs_coma -> empty .)


state 124

    (58) funcs_coma -> COMA . ID DOS_PUNTOS tipo funcs_coma

    ID              shift and go to state 142


state 125

    (52) funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars . cuerpo LLAVE_CIERRA PUNTO_Y_COMA
    (14) cuerpo -> . LLAVE_ABRE cuerpo_estat LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 27

    cuerpo                         shift and go to state 143

state 126

    (59) func_vars -> empty .

    LLAVE_ABRE      reduce using rule 59 (func_vars -> empty .)


state 127

    (60) func_vars -> vars .

    LLAVE_ABRE      reduce using rule 60 (func_vars -> vars .)


state 128

    (19) expresion_exp -> OP_MAYOR exp .

    PUNTO_Y_COMA    reduce using rule 19 (expresion_exp -> OP_MAYOR exp .)
    COMA            reduce using rule 19 (expresion_exp -> OP_MAYOR exp .)
    PAR_CIERRA      reduce using rule 19 (expresion_exp -> OP_MAYOR exp .)


state 129

    (20) expresion_exp -> OP_MENOR exp .

    PUNTO_Y_COMA    reduce using rule 20 (expresion_exp -> OP_MENOR exp .)
    COMA            reduce using rule 20 (expresion_exp -> OP_MENOR exp .)
    PAR_CIERRA      reduce using rule 20 (expresion_exp -> OP_MENOR exp .)


state 130

    (21) expresion_exp -> OP_DIF exp .

    PUNTO_Y_COMA    reduce using rule 21 (expresion_exp -> OP_DIF exp .)
    COMA            reduce using rule 21 (expresion_exp -> OP_DIF exp .)
    PAR_CIERRA      reduce using rule 21 (expresion_exp -> OP_DIF exp .)


state 131

    (22) expresion_exp -> OP_IGUAL exp .

    PUNTO_Y_COMA    reduce using rule 22 (expresion_exp -> OP_IGUAL exp .)
    COMA            reduce using rule 22 (expresion_exp -> OP_IGUAL exp .)
    PAR_CIERRA      reduce using rule 22 (expresion_exp -> OP_IGUAL exp .)


state 132

    (63) exp_termino -> OP_SUMA exp .

    OP_MAYOR        reduce using rule 63 (exp_termino -> OP_SUMA exp .)
    OP_MENOR        reduce using rule 63 (exp_termino -> OP_SUMA exp .)
    OP_DIF          reduce using rule 63 (exp_termino -> OP_SUMA exp .)
    OP_IGUAL        reduce using rule 63 (exp_termino -> OP_SUMA exp .)
    PUNTO_Y_COMA    reduce using rule 63 (exp_termino -> OP_SUMA exp .)
    COMA            reduce using rule 63 (exp_termino -> OP_SUMA exp .)
    PAR_CIERRA      reduce using rule 63 (exp_termino -> OP_SUMA exp .)


state 133

    (64) exp_termino -> OP_RESTA exp .

    OP_MAYOR        reduce using rule 64 (exp_termino -> OP_RESTA exp .)
    OP_MENOR        reduce using rule 64 (exp_termino -> OP_RESTA exp .)
    OP_DIF          reduce using rule 64 (exp_termino -> OP_RESTA exp .)
    OP_IGUAL        reduce using rule 64 (exp_termino -> OP_RESTA exp .)
    PUNTO_Y_COMA    reduce using rule 64 (exp_termino -> OP_RESTA exp .)
    COMA            reduce using rule 64 (exp_termino -> OP_RESTA exp .)
    PAR_CIERRA      reduce using rule 64 (exp_termino -> OP_RESTA exp .)


state 134

    (67) termino_factor -> OP_MULT termino .

    OP_SUMA         reduce using rule 67 (termino_factor -> OP_MULT termino .)
    OP_RESTA        reduce using rule 67 (termino_factor -> OP_MULT termino .)
    OP_MAYOR        reduce using rule 67 (termino_factor -> OP_MULT termino .)
    OP_MENOR        reduce using rule 67 (termino_factor -> OP_MULT termino .)
    OP_DIF          reduce using rule 67 (termino_factor -> OP_MULT termino .)
    OP_IGUAL        reduce using rule 67 (termino_factor -> OP_MULT termino .)
    PUNTO_Y_COMA    reduce using rule 67 (termino_factor -> OP_MULT termino .)
    COMA            reduce using rule 67 (termino_factor -> OP_MULT termino .)
    PAR_CIERRA      reduce using rule 67 (termino_factor -> OP_MULT termino .)


state 135

    (68) termino_factor -> OP_DIV termino .

    OP_SUMA         reduce using rule 68 (termino_factor -> OP_DIV termino .)
    OP_RESTA        reduce using rule 68 (termino_factor -> OP_DIV termino .)
    OP_MAYOR        reduce using rule 68 (termino_factor -> OP_DIV termino .)
    OP_MENOR        reduce using rule 68 (termino_factor -> OP_DIV termino .)
    OP_DIF          reduce using rule 68 (termino_factor -> OP_DIV termino .)
    OP_IGUAL        reduce using rule 68 (termino_factor -> OP_DIV termino .)
    PUNTO_Y_COMA    reduce using rule 68 (termino_factor -> OP_DIV termino .)
    COMA            reduce using rule 68 (termino_factor -> OP_DIV termino .)
    PAR_CIERRA      reduce using rule 68 (termino_factor -> OP_DIV termino .)


state 136

    (37) factor -> PAR_ABRE expresion PAR_CIERRA .

    OP_MULT         reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    OP_DIV          reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    OP_SUMA         reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    OP_RESTA        reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    OP_MAYOR        reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    OP_MENOR        reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    OP_DIF          reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    OP_IGUAL        reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    PUNTO_Y_COMA    reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    COMA            reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)
    PAR_CIERRA      reduce using rule 37 (factor -> PAR_ABRE expresion PAR_CIERRA .)


state 137

    (36) llamada_ex -> COMA expresion . llamada_ex
    (35) llamada_ex -> . empty
    (36) llamada_ex -> . COMA expresion llamada_ex
    (76) empty -> .

    COMA            shift and go to state 114
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    llamada_ex                     shift and go to state 144
    empty                          shift and go to state 113

state 138

    (24) condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo . condicion_cuerpo PUNTO_Y_COMA
    (25) condicion_cuerpo -> . empty
    (26) condicion_cuerpo -> . SINO cuerpo
    (76) empty -> .

    SINO            shift and go to state 147
    PUNTO_Y_COMA    reduce using rule 76 (empty -> .)

    condicion_cuerpo               shift and go to state 145
    empty                          shift and go to state 146

state 139

    (23) ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ . cuerpo PUNTO_Y_COMA
    (14) cuerpo -> . LLAVE_ABRE cuerpo_estat LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 27

    cuerpo                         shift and go to state 148

state 140

    (27) imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA .

    CORA_ABRE       reduce using rule 27 (imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA .)
    ID              reduce using rule 27 (imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA .)
    SI              reduce using rule 27 (imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA .)
    MIENTRAS        reduce using rule 27 (imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA .)
    ESCRIBE         reduce using rule 27 (imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 27 (imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA .)
    CORA_CIERRA     reduce using rule 27 (imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA .)


state 141

    (31) imprime_exp_p -> COMA imprime_exp .

    PAR_CIERRA      reduce using rule 31 (imprime_exp_p -> COMA imprime_exp .)


state 142

    (58) funcs_coma -> COMA ID . DOS_PUNTOS tipo funcs_coma

    DOS_PUNTOS      shift and go to state 149


state 143

    (52) funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo . LLAVE_CIERRA PUNTO_Y_COMA

    LLAVE_CIERRA    shift and go to state 150


state 144

    (36) llamada_ex -> COMA expresion llamada_ex .

    PAR_CIERRA      reduce using rule 36 (llamada_ex -> COMA expresion llamada_ex .)


state 145

    (24) condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo . PUNTO_Y_COMA

    PUNTO_Y_COMA    shift and go to state 151


state 146

    (25) condicion_cuerpo -> empty .

    PUNTO_Y_COMA    reduce using rule 25 (condicion_cuerpo -> empty .)


state 147

    (26) condicion_cuerpo -> SINO . cuerpo
    (14) cuerpo -> . LLAVE_ABRE cuerpo_estat LLAVE_CIERRA

    LLAVE_ABRE      shift and go to state 27

    cuerpo                         shift and go to state 152

state 148

    (23) ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo . PUNTO_Y_COMA

    PUNTO_Y_COMA    shift and go to state 153


state 149

    (58) funcs_coma -> COMA ID DOS_PUNTOS . tipo funcs_coma
    (1) tipo -> . ENTERO
    (2) tipo -> . FLOTANTE

    ENTERO          shift and go to state 16
    FLOTANTE        shift and go to state 17

    tipo                           shift and go to state 154

state 150

    (52) funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA . PUNTO_Y_COMA

    PUNTO_Y_COMA    shift and go to state 155


state 151

    (24) condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA .

    CORA_ABRE       reduce using rule 24 (condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA .)
    ID              reduce using rule 24 (condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA .)
    SI              reduce using rule 24 (condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA .)
    MIENTRAS        reduce using rule 24 (condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA .)
    ESCRIBE         reduce using rule 24 (condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 24 (condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA .)
    CORA_CIERRA     reduce using rule 24 (condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA .)


state 152

    (26) condicion_cuerpo -> SINO cuerpo .

    PUNTO_Y_COMA    reduce using rule 26 (condicion_cuerpo -> SINO cuerpo .)


state 153

    (23) ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA .

    CORA_ABRE       reduce using rule 23 (ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA .)
    ID              reduce using rule 23 (ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA .)
    SI              reduce using rule 23 (ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA .)
    MIENTRAS        reduce using rule 23 (ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA .)
    ESCRIBE         reduce using rule 23 (ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA .)
    LLAVE_CIERRA    reduce using rule 23 (ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA .)
    CORA_CIERRA     reduce using rule 23 (ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA .)


state 154

    (58) funcs_coma -> COMA ID DOS_PUNTOS tipo . funcs_coma
    (57) funcs_coma -> . empty
    (58) funcs_coma -> . COMA ID DOS_PUNTOS tipo funcs_coma
    (76) empty -> .

    COMA            shift and go to state 124
    PAR_CIERRA      reduce using rule 76 (empty -> .)

    funcs_coma                     shift and go to state 156
    empty                          shift and go to state 123

state 155

    (52) funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA .

    NULA            reduce using rule 52 (funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA .)
    ENTERO          reduce using rule 52 (funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA .)
    FLOTANTE        reduce using rule 52 (funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA .)
    INICIO          reduce using rule 52 (funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA .)


state 156

    (58) funcs_coma -> COMA ID DOS_PUNTOS tipo funcs_coma .

    PAR_CIERRA      reduce using rule 58 (funcs_coma -> COMA ID DOS_PUNTOS tipo funcs_coma .)

