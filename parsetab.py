
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programanonassocOP_IGUALOP_DIFOP_MAYOROP_MENORleftOP_SUMAOP_RESTAleftOP_MULTOP_DIVCOMA CORA_ABRE CORA_CIERRA CTE_ENT CTE_FLOT DOS_PUNTOS ENTERO ESCRIBE FIN FLOTANTE HAZ ID INICIO LETRERO LLAVE_ABRE LLAVE_CIERRA MIENTRAS NULA OP_ASIG OP_DIF OP_DIV OP_IGUAL OP_MAYOR OP_MENOR OP_MULT OP_RESTA OP_SUMA PAR_ABRE PAR_CIERRA PROGRAMA PUNTO_Y_COMA SI SINO VARStipo : ENTERO\n            | FLOTANTEcte : CTE_ENT\n           | CTE_FLOTasigna : ID OP_ASIG expresion PUNTO_Y_COMAestatuto : asigna\n                | condicion\n                | ciclo\n                | llamada PUNTO_Y_COMA\n                | imprime\n                | CORA_ABRE list_estatuto CORA_CIERRAlist_estatuto : empty\n                     | estatuto list_estatutocuerpo : LLAVE_ABRE cuerpo_estat LLAVE_CIERRAcuerpo_estat : empty\n                    | estatuto cuerpo_estatexpresion : exp expresion_expexpresion_exp : empty\n                     | OP_MAYOR exp\n                     | OP_MENOR exp\n                     | OP_DIF   exp\n                     | OP_IGUAL expciclo : MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMAcondicion : SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMAcondicion_cuerpo : empty\n                        | SINO cuerpoimprime : ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMAimprime_exp : expresion imprime_exp_p\n                   | LETRERO  imprime_exp_pimprime_exp_p : empty\n                     | COMA imprime_expllamada : ID PAR_ABRE llamada_expresion PAR_CIERRAllamada_expresion : empty\n                         | expresion llamada_exllamada_ex : empty\n                  | COMA expresion llamada_exfactor : PAR_ABRE expresion PAR_CIERRAfactor : factor_sr factor_ctefactor_sr : empty\n                 | factor_rsfactor_rs : OP_SUMA\n                 | OP_RESTAfactor_cte : ID\n                  | cte\n                  | llamadavars : VARS ID vars_todovars_todo : vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_finalvars_coma : empty\n                 | COMA ID vars_comavars_final : empty\n                  | vars_todofuncs : funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMAfuncs_nt : NULA\n                | tipofunc_tipo : empty\n                 | ID DOS_PUNTOS tipo funcs_comafuncs_coma : empty\n                  | COMA ID DOS_PUNTOS tipo funcs_comafunc_vars : empty\n                 | varsexp : termino exp_terminoexp_termino : empty\n                   | OP_SUMA exp\n                   | OP_RESTA exptermino : factor termino_factortermino_factor : empty\n                      | OP_MULT termino\n                      | OP_DIV  terminoprograma : PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo FINpro_vars : empty\n                | varspro_funcs : empty\n                 | pro_funcs_listpro_funcs_list : funcs\n                      | pro_funcs_list funcsempty :'
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,31,],[0,-69,]),'ID':([2,8,13,14,15,16,17,25,27,28,34,35,36,37,39,40,52,55,56,57,58,59,60,64,70,71,72,73,74,75,77,89,92,93,94,95,98,99,102,103,114,120,124,140,151,153,],[3,18,21,-53,-54,-1,-2,30,41,45,41,-6,-7,-8,-10,41,-9,41,-76,-76,-76,-76,-76,-11,-76,106,-39,-40,-41,-42,-39,-5,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,142,-27,-24,-23,]),'PUNTO_Y_COMA':([3,16,17,38,48,50,66,67,68,69,90,91,96,97,100,101,105,106,107,108,109,110,111,117,128,129,130,131,132,133,134,135,136,138,145,146,148,150,152,],[4,-1,-2,52,63,-14,89,-76,-76,-76,-17,-18,-61,-62,-65,-66,-38,-43,-44,-45,-3,-4,-32,140,-19,-20,-21,-22,-63,-64,-67,-68,-37,-76,151,-25,153,155,-26,]),'NULA':([4,5,6,7,11,12,20,22,63,86,87,88,155,],[-76,14,-70,-71,14,-74,-75,-46,-76,-47,-50,-51,-52,]),'ENTERO':([4,5,6,7,11,12,20,22,29,61,63,86,87,88,149,155,],[-76,16,-70,-71,16,-74,-75,-46,16,16,-76,-47,-50,-51,16,-52,]),'FLOTANTE':([4,5,6,7,11,12,20,22,29,61,63,86,87,88,149,155,],[-76,17,-70,-71,17,-74,-75,-46,17,17,-76,-47,-50,-51,17,-52,]),'INICIO':([4,5,6,7,9,10,11,12,20,22,63,86,87,88,155,],[-76,-76,-70,-71,19,-72,-73,-74,-75,-46,-76,-47,-50,-51,-52,]),'VARS':([4,85,],[8,8,]),'COMA':([16,17,18,30,63,67,68,69,78,82,83,84,90,91,96,97,100,101,105,106,107,108,109,110,111,128,129,130,131,132,133,134,135,136,137,154,],[-1,-2,25,25,25,-76,-76,-76,114,120,120,124,-17,-18,-61,-62,-65,-66,-38,-43,-44,-45,-3,-4,-32,-19,-20,-21,-22,-63,-64,-67,-68,-37,114,124,]),'PAR_CIERRA':([16,17,28,46,47,57,67,68,69,76,77,78,79,80,81,82,83,84,90,91,96,97,100,101,104,105,106,107,108,109,110,111,112,113,118,119,121,122,123,128,129,130,131,132,133,134,135,136,137,141,144,154,156,],[-1,-2,-76,62,-55,-76,-76,-76,-76,111,-33,-76,115,116,117,-76,-76,-76,-17,-18,-61,-62,-65,-66,136,-38,-43,-44,-45,-3,-4,-32,-34,-35,-28,-30,-29,-56,-57,-19,-20,-21,-22,-63,-64,-67,-68,-37,-76,-31,-36,-76,-58,]),'DOS_PUNTOS':([18,23,24,30,45,49,63,87,142,],[-76,29,-48,-76,61,-49,-76,-48,149,]),'LLAVE_ABRE':([19,22,62,63,85,86,87,88,115,125,126,127,139,147,],[27,-46,85,-76,-76,-47,-50,-51,27,27,-59,-60,27,27,]),'PAR_ABRE':([21,41,42,43,44,56,57,58,59,60,70,92,93,94,95,98,99,102,103,106,114,120,],[28,57,58,59,60,70,70,70,70,70,70,70,70,70,70,70,70,70,70,57,70,70,]),'FIN':([26,50,],[31,-14,]),'LLAVE_CIERRA':([27,32,33,34,35,36,37,39,50,51,52,64,89,140,143,151,153,],[-76,50,-15,-76,-6,-7,-8,-10,-14,-16,-9,-11,-5,-27,150,-24,-23,]),'CORA_ABRE':([27,34,35,36,37,39,40,52,55,64,89,140,151,153,],[40,40,-6,-7,-8,-10,40,-9,40,-11,-5,-27,-24,-23,]),'SI':([27,34,35,36,37,39,40,52,55,64,89,140,151,153,],[42,42,-6,-7,-8,-10,42,-9,42,-11,-5,-27,-24,-23,]),'MIENTRAS':([27,34,35,36,37,39,40,52,55,64,89,140,151,153,],[43,43,-6,-7,-8,-10,43,-9,43,-11,-5,-27,-24,-23,]),'ESCRIBE':([27,34,35,36,37,39,40,52,55,64,89,140,151,153,],[44,44,-6,-7,-8,-10,44,-9,44,-11,-5,-27,-24,-23,]),'CORA_CIERRA':([35,36,37,39,40,52,53,54,55,64,65,89,140,151,153,],[-6,-7,-8,-10,-76,-9,64,-12,-76,-11,-13,-5,-27,-24,-23,]),'OP_ASIG':([41,],[56,]),'SINO':([50,138,],[-14,147,]),'CTE_ENT':([56,57,58,59,60,70,71,72,73,74,75,77,92,93,94,95,98,99,102,103,114,120,],[-76,-76,-76,-76,-76,-76,109,-39,-40,-41,-42,-39,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,]),'CTE_FLOT':([56,57,58,59,60,70,71,72,73,74,75,77,92,93,94,95,98,99,102,103,114,120,],[-76,-76,-76,-76,-76,-76,110,-39,-40,-41,-42,-39,-76,-76,-76,-76,-76,-76,-76,-76,-76,-76,]),'OP_SUMA':([56,57,58,59,60,68,69,70,92,93,94,95,98,99,100,101,102,103,105,106,107,108,109,110,111,114,120,134,135,136,],[74,74,74,74,74,98,-76,74,74,74,74,74,74,74,-65,-66,74,74,-38,-43,-44,-45,-3,-4,-32,74,74,-67,-68,-37,]),'OP_RESTA':([56,57,58,59,60,68,69,70,92,93,94,95,98,99,100,101,102,103,105,106,107,108,109,110,111,114,120,134,135,136,],[75,75,75,75,75,99,-76,75,75,75,75,75,75,75,-65,-66,75,75,-38,-43,-44,-45,-3,-4,-32,75,75,-67,-68,-37,]),'LETRERO':([60,120,],[83,83,]),'OP_MAYOR':([67,68,69,96,97,100,101,105,106,107,108,109,110,111,132,133,134,135,136,],[92,-76,-76,-61,-62,-65,-66,-38,-43,-44,-45,-3,-4,-32,-63,-64,-67,-68,-37,]),'OP_MENOR':([67,68,69,96,97,100,101,105,106,107,108,109,110,111,132,133,134,135,136,],[93,-76,-76,-61,-62,-65,-66,-38,-43,-44,-45,-3,-4,-32,-63,-64,-67,-68,-37,]),'OP_DIF':([67,68,69,96,97,100,101,105,106,107,108,109,110,111,132,133,134,135,136,],[94,-76,-76,-61,-62,-65,-66,-38,-43,-44,-45,-3,-4,-32,-63,-64,-67,-68,-37,]),'OP_IGUAL':([67,68,69,96,97,100,101,105,106,107,108,109,110,111,132,133,134,135,136,],[95,-76,-76,-61,-62,-65,-66,-38,-43,-44,-45,-3,-4,-32,-63,-64,-67,-68,-37,]),'OP_MULT':([69,105,106,107,108,109,110,111,136,],[102,-38,-43,-44,-45,-3,-4,-32,-37,]),'OP_DIV':([69,105,106,107,108,109,110,111,136,],[103,-38,-43,-44,-45,-3,-4,-32,-37,]),'HAZ':([116,],[139,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'pro_vars':([4,],[5,]),'empty':([4,5,18,27,28,30,34,40,55,56,57,58,59,60,63,67,68,69,70,78,82,83,84,85,92,93,94,95,98,99,102,103,114,120,137,138,154,],[6,10,24,33,47,24,33,54,54,72,77,72,72,72,87,91,97,101,72,113,119,119,123,126,72,72,72,72,72,72,72,72,72,72,113,146,123,]),'vars':([4,85,],[7,127,]),'pro_funcs':([5,],[9,]),'pro_funcs_list':([5,],[11,]),'funcs':([5,11,],[12,20,]),'funcs_nt':([5,11,],[13,13,]),'tipo':([5,11,29,61,149,],[15,15,48,84,154,]),'vars_todo':([18,63,],[22,88,]),'vars_coma':([18,30,63,],[23,49,23,]),'cuerpo':([19,115,125,139,147,],[26,138,143,148,152,]),'cuerpo_estat':([27,34,],[32,51,]),'estatuto':([27,34,40,55,],[34,34,55,55,]),'asigna':([27,34,40,55,],[35,35,35,35,]),'condicion':([27,34,40,55,],[36,36,36,36,]),'ciclo':([27,34,40,55,],[37,37,37,37,]),'llamada':([27,34,40,55,71,],[38,38,38,38,108,]),'imprime':([27,34,40,55,],[39,39,39,39,]),'func_tipo':([28,],[46,]),'list_estatuto':([40,55,],[53,65,]),'expresion':([56,57,58,59,60,70,114,120,],[66,78,79,80,82,104,137,82,]),'exp':([56,57,58,59,60,70,92,93,94,95,98,99,114,120,],[67,67,67,67,67,67,128,129,130,131,132,133,67,67,]),'termino':([56,57,58,59,60,70,92,93,94,95,98,99,102,103,114,120,],[68,68,68,68,68,68,68,68,68,68,68,68,134,135,68,68,]),'factor':([56,57,58,59,60,70,92,93,94,95,98,99,102,103,114,120,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'factor_sr':([56,57,58,59,60,70,92,93,94,95,98,99,102,103,114,120,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'factor_rs':([56,57,58,59,60,70,92,93,94,95,98,99,102,103,114,120,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'llamada_expresion':([57,],[76,]),'imprime_exp':([60,120,],[81,141,]),'vars_final':([63,],[86,]),'expresion_exp':([67,],[90,]),'exp_termino':([68,],[96,]),'termino_factor':([69,],[100,]),'factor_cte':([71,],[105,]),'cte':([71,],[107,]),'llamada_ex':([78,137,],[112,144,]),'imprime_exp_p':([82,83,],[118,121,]),'funcs_coma':([84,154,],[122,156,]),'func_vars':([85,],[125,]),'condicion_cuerpo':([138,],[145,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('tipo -> ENTERO','tipo',1,'p_tipo','parser.py',22),
  ('tipo -> FLOTANTE','tipo',1,'p_tipo','parser.py',23),
  ('cte -> CTE_ENT','cte',1,'p_cte','parser.py',30),
  ('cte -> CTE_FLOT','cte',1,'p_cte','parser.py',31),
  ('asigna -> ID OP_ASIG expresion PUNTO_Y_COMA','asigna',4,'p_asigna','parser.py',38),
  ('estatuto -> asigna','estatuto',1,'p_estatuto','parser.py',45),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','parser.py',46),
  ('estatuto -> ciclo','estatuto',1,'p_estatuto','parser.py',47),
  ('estatuto -> llamada PUNTO_Y_COMA','estatuto',2,'p_estatuto','parser.py',48),
  ('estatuto -> imprime','estatuto',1,'p_estatuto','parser.py',49),
  ('estatuto -> CORA_ABRE list_estatuto CORA_CIERRA','estatuto',3,'p_estatuto','parser.py',50),
  ('list_estatuto -> empty','list_estatuto',1,'p_list_estatuto','parser.py',59),
  ('list_estatuto -> estatuto list_estatuto','list_estatuto',2,'p_list_estatuto','parser.py',60),
  ('cuerpo -> LLAVE_ABRE cuerpo_estat LLAVE_CIERRA','cuerpo',3,'p_cuerpo','parser.py',70),
  ('cuerpo_estat -> empty','cuerpo_estat',1,'p_cuerpo_estat','parser.py',74),
  ('cuerpo_estat -> estatuto cuerpo_estat','cuerpo_estat',2,'p_cuerpo_estat','parser.py',75),
  ('expresion -> exp expresion_exp','expresion',2,'p_expresion','parser.py',85),
  ('expresion_exp -> empty','expresion_exp',1,'p_expresion_exp','parser.py',93),
  ('expresion_exp -> OP_MAYOR exp','expresion_exp',2,'p_expresion_exp','parser.py',94),
  ('expresion_exp -> OP_MENOR exp','expresion_exp',2,'p_expresion_exp','parser.py',95),
  ('expresion_exp -> OP_DIF exp','expresion_exp',2,'p_expresion_exp','parser.py',96),
  ('expresion_exp -> OP_IGUAL exp','expresion_exp',2,'p_expresion_exp','parser.py',97),
  ('ciclo -> MIENTRAS PAR_ABRE expresion PAR_CIERRA HAZ cuerpo PUNTO_Y_COMA','ciclo',7,'p_ciclo','parser.py',107),
  ('condicion -> SI PAR_ABRE expresion PAR_CIERRA cuerpo condicion_cuerpo PUNTO_Y_COMA','condicion',7,'p_condicion','parser.py',114),
  ('condicion_cuerpo -> empty','condicion_cuerpo',1,'p_condicion_cuerpo','parser.py',118),
  ('condicion_cuerpo -> SINO cuerpo','condicion_cuerpo',2,'p_condicion_cuerpo','parser.py',119),
  ('imprime -> ESCRIBE PAR_ABRE imprime_exp PAR_CIERRA PUNTO_Y_COMA','imprime',5,'p_imprime','parser.py',129),
  ('imprime_exp -> expresion imprime_exp_p','imprime_exp',2,'p_imprime_exp','parser.py',133),
  ('imprime_exp -> LETRERO imprime_exp_p','imprime_exp',2,'p_imprime_exp','parser.py',134),
  ('imprime_exp_p -> empty','imprime_exp_p',1,'p_imprime_exp_p','parser.py',140),
  ('imprime_exp_p -> COMA imprime_exp','imprime_exp_p',2,'p_imprime_exp_p','parser.py',141),
  ('llamada -> ID PAR_ABRE llamada_expresion PAR_CIERRA','llamada',4,'p_llamada','parser.py',151),
  ('llamada_expresion -> empty','llamada_expresion',1,'p_llamada_expresion','parser.py',155),
  ('llamada_expresion -> expresion llamada_ex','llamada_expresion',2,'p_llamada_expresion','parser.py',156),
  ('llamada_ex -> empty','llamada_ex',1,'p_llamada_ex','parser.py',163),
  ('llamada_ex -> COMA expresion llamada_ex','llamada_ex',3,'p_llamada_ex','parser.py',164),
  ('factor -> PAR_ABRE expresion PAR_CIERRA','factor',3,'p_factor_group','parser.py',174),
  ('factor -> factor_sr factor_cte','factor',2,'p_factor_signed','parser.py',178),
  ('factor_sr -> empty','factor_sr',1,'p_factor_sr','parser.py',188),
  ('factor_sr -> factor_rs','factor_sr',1,'p_factor_sr','parser.py',189),
  ('factor_rs -> OP_SUMA','factor_rs',1,'p_factor_rs','parser.py',193),
  ('factor_rs -> OP_RESTA','factor_rs',1,'p_factor_rs','parser.py',194),
  ('factor_cte -> ID','factor_cte',1,'p_factor_cte','parser.py',198),
  ('factor_cte -> cte','factor_cte',1,'p_factor_cte','parser.py',199),
  ('factor_cte -> llamada','factor_cte',1,'p_factor_cte','parser.py',200),
  ('vars -> VARS ID vars_todo','vars',3,'p_vars','parser.py',207),
  ('vars_todo -> vars_coma DOS_PUNTOS tipo PUNTO_Y_COMA vars_final','vars_todo',5,'p_vars_todo','parser.py',212),
  ('vars_coma -> empty','vars_coma',1,'p_vars_coma','parser.py',216),
  ('vars_coma -> COMA ID vars_coma','vars_coma',3,'p_vars_coma','parser.py',217),
  ('vars_final -> empty','vars_final',1,'p_vars_final','parser.py',224),
  ('vars_final -> vars_todo','vars_final',1,'p_vars_final','parser.py',225),
  ('funcs -> funcs_nt ID PAR_ABRE func_tipo PAR_CIERRA LLAVE_ABRE func_vars cuerpo LLAVE_CIERRA PUNTO_Y_COMA','funcs',10,'p_funcs','parser.py',232),
  ('funcs_nt -> NULA','funcs_nt',1,'p_funcs_nt','parser.py',236),
  ('funcs_nt -> tipo','funcs_nt',1,'p_funcs_nt','parser.py',237),
  ('func_tipo -> empty','func_tipo',1,'p_func_tipo','parser.py',241),
  ('func_tipo -> ID DOS_PUNTOS tipo funcs_coma','func_tipo',4,'p_func_tipo','parser.py',242),
  ('funcs_coma -> empty','funcs_coma',1,'p_funcs_coma','parser.py',249),
  ('funcs_coma -> COMA ID DOS_PUNTOS tipo funcs_coma','funcs_coma',5,'p_funcs_coma','parser.py',250),
  ('func_vars -> empty','func_vars',1,'p_func_vars','parser.py',257),
  ('func_vars -> vars','func_vars',1,'p_func_vars','parser.py',258),
  ('exp -> termino exp_termino','exp',2,'p_exp','parser.py',265),
  ('exp_termino -> empty','exp_termino',1,'p_exp_termino','parser.py',273),
  ('exp_termino -> OP_SUMA exp','exp_termino',2,'p_exp_termino','parser.py',274),
  ('exp_termino -> OP_RESTA exp','exp_termino',2,'p_exp_termino','parser.py',275),
  ('termino -> factor termino_factor','termino',2,'p_termino','parser.py',285),
  ('termino_factor -> empty','termino_factor',1,'p_termino_factor','parser.py',293),
  ('termino_factor -> OP_MULT termino','termino_factor',2,'p_termino_factor','parser.py',294),
  ('termino_factor -> OP_DIV termino','termino_factor',2,'p_termino_factor','parser.py',295),
  ('programa -> PROGRAMA ID PUNTO_Y_COMA pro_vars pro_funcs INICIO cuerpo FIN','programa',8,'p_programa','parser.py',308),
  ('pro_vars -> empty','pro_vars',1,'p_pro_vars','parser.py',312),
  ('pro_vars -> vars','pro_vars',1,'p_pro_vars','parser.py',313),
  ('pro_funcs -> empty','pro_funcs',1,'p_pro_funcs','parser.py',317),
  ('pro_funcs -> pro_funcs_list','pro_funcs',1,'p_pro_funcs','parser.py',318),
  ('pro_funcs_list -> funcs','pro_funcs_list',1,'p_pro_funcs_list','parser.py',322),
  ('pro_funcs_list -> pro_funcs_list funcs','pro_funcs_list',2,'p_pro_funcs_list','parser.py',323),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',333),
]
